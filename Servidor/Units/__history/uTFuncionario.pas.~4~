unit uTFuncionario;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, Mask, ComCtrls, FMTBcd, DBCtrls, uDM, CheckLst,
  SqlExpr, DB, DBGrids;

type
  TFuncionario = class

  private

  public
    function excluir(codigo: Integer): Boolean;
    function getNome(codigo: Integer): string;
    function getTotalFuncionarios():Integer;
    function eOPCaixa(usuario: Integer): Boolean;
  end;

implementation

{ TUnidadeMedida }

function TFuncionario.eOPCaixa(usuario: Integer): Boolean;
var
  sql: TSQLDataSet;
begin
  sql := TSQLDataSet.Create(nil);
  sql.SQLConnection := DM.SQLConnection;
  sql.CommandText := 'SELECT OPCAIXA FROM VFUNCIONARIOS WHERE CODIGO =:CODIGO';
  sql.Params[0].AsInteger := usuario;
  sql.Open;

  if sql.FieldByName('OPCAIXA').AsInteger = 1 then
    Result := False
  ELSE
    Result := True;
end;

function TFuncionario.excluir(codigo: Integer): Boolean;
var
  sql: TSQLDataSet;
begin
  try
    sql := TSQLDataSet.Create(nil);
    sql.SQLConnection := DM.SQLConnection;
    sql.CommandText :=
      'UPDATE FUNCIONARIOS SET STATUS = 0 WHERE CODIGO =:CODIGO';
    sql.Params[0].AsInteger := codigo;
    sql.ExecSQL;

    Result := True;
  except
    Result := False;
  end;
end;

function TFuncionario.getNome(codigo: Integer): string;
var
  sql: TSQLDataSet;
begin
  sql := TSQLDataSet.Create(nil);
  sql.SQLConnection := DM.SQLConnection;
  sql.CommandText := 'SELECT NOME FROM VFUNCIONARIOS WHERE CODIGO =:CODIGO';
  sql.Params[0].AsInteger := codigo;
  sql.Open;

  Result := sql.FieldByName('NOME').AsString;
end;

function TFuncionario.getTotalFuncionarios: Integer;
var
  sql: TSQLDataSet;
begin
  sql := TSQLDataSet.Create(nil);
  sql.SQLConnection := DM.SQLConnection;
  sql.CommandText := 'SELECT COUNT(CODIGO) AS TOTAL FROM VFUNCIONARIOS';
  sql.Open;

  Result := sql.FieldByName('TOTAL').AsInteger;
  sql.Free;
end;

end.
